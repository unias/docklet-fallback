#!/usr/bin/python3

# apt-get install python3-pyftpdlib python3-openssl python3-pampy

# download  => curl -k --ftp-ssl -O ftp://user:pass@0.0.0.0:8021/dir1/remote-file1.txt
# updoad    => curl -k --ftp-ssl -T /boot/grub/grub.cfg ftp://user:pass@0.0.0.0:8021/
# delete    => curl -k --ftp-ssl -X 'DELE /dir1/remote-file1.txt' ftp://user:pass@0.0.0.0:8021/

# lsdir     => curl -k --ftp-ssl ftp://user:pass@0.0.0.0:8021/Desktop/
# mkdir     => curl -k --ftp-ssl -X 'MKD /dir-new' ftp://user:pass@0.0.0.0:8021/
# rmdir     => curl -k --ftp-ssl -X 'RMD /dir-new' ftp://user:pass@0.0.0.0:8021/

from pyftpdlib.authorizers import DummyAuthorizer, AuthenticationFailed
from pyftpdlib import handlers
from pyftpdlib.handlers import TLS_FTPHandler, ThrottledDTPHandler
from pyftpdlib.servers import FTPServer
from pam import pam

import os

def user_authenticate(username, password):
	return pam().authenticate(username, password)

def get_path_by_username(username):
	return './users/%s' % username


class PamAuthorizer(DummyAuthorizer):
	def validate_authentication(self, username, password, handler):
		msg = "Authentication failed."
		if username == 'root' or not user_authenticate(username, password):
			raise AuthenticationFailed(msg)
		self.user_table[username] = {}
		self.user_table[username]['msg_login'] = 'Login successful.'
		self.user_table[username]['msg_quit'] = 'Goodbye.'
		file_path = get_path_by_username(username)
		if not os.path.exists(file_path):
			os.makedirs(file_path)
		self.user_table[username]['home'] = file_path
		self.user_table[username]['perm'] = 'elradfmwM'
		self.user_table[username]['operms'] = {}

def main():
	handler = TLS_FTPHandler

	handler.banner = "pyftpdlib based ftpd ready."
	handler.passive_ports = range(8400, 8440)
	handler.authorizer = PamAuthorizer()
	
	handler.certfile = 'cacert.pem'
	if not os.path.exists(handler.certfile):
		os.system('openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -subj "/CN=ghostplant/" -keyout %s -out %s' % (handler.certfile, handler.certfile))
	
	handler.tls_control_required = True
	handler.tls_data_required = True

	server = FTPServer(('0.0.0.0', 8021), handler)

	server.max_cons = 256
	server.max_cons_per_ip = 4

	server.serve_forever()

if __name__ == '__main__':
	main()

